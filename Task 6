Abstraction
the process of simplifying complex systems by breaking them down into smaller, more manageable parts. It involves focusing on essential features while hiding the unnecessary details. Abstraction allows you to create a high-level view of a system, making it easier to understand and work with.
Complexity Management: By dividing them into manageable components.
Ease of Understanding: clear, high-level view of a system, making it easier to understand and work with.
Reusability: It promotes reusability by encapsulating functionality into distinct components.
Reduced Code Duplication: create templates or blueprints for classes and methods, reducing code duplication.
Polymorphism: It enables polymorphism, allowing objects of different classes to be treated as instances of a common superclass or interface.

Declaration with abstract Keyword:
An abstract class is declared using the abstract keyword in its class definition.
Example: public abstract class MyAbstractClass {
    }
Abstract Methods:
Abstract classes can include abstract methods, which are declared without an implementation
Subclasses that inherit from an abstract class must provide concrete (implemented) versions of all abstract methods.
public abstract class MyAbstractClass {
    public abstract void doSomething ();
}
Abstract classes can also include concrete (implemented) methods, which provide default behaviour that can be optionally overridden by subclasses.
Subclasses can choose to override or use these methods as-is.
public abstract class MyAbstractClass {
 public void doSomething () {
        // Default implementation
    }  }
Cannot Be Instantiated:
You cannot create an instance of an abstract class using new keyword. Abstract classes exist to be extended by other classes.
// This is not allowed: MyAbstractClass instance = new MyAbstractClass ();
Constructor in Abstract Class:
Abstract classes can have constructors, and they are called when a subclass is instantiated.
Example code
abstract class Shape {
    abstract double area();
}
class Circle extends Shape {
    double radius;
    Circle(double radius) {
        this.radius = radius;
    }
    @Override
    double area() {
        return Math.PI * radius * radius;
    }
}
public class Abstraction {
    public static void main(String []args)
    {
        Circle c=new Circle(15.5);
        double ar=c.area();
        System.out.println("Area is:"+ar);
    }
}




Encapsulation:
bundling data (attributes) and methods (functions) that operate on that data into a single unit, known as a class.
This unit provides controlled access to the internal state of objects, restricting external entities from directly modifying the data.
Encapsulation is used for several key reasons:
Data Protection: It safeguards the object's internal data by restricting direct access from external code.
Controlled Access: It provides a controlled interface for interacting with an object. This control can include validation, access restrictions, and business logic.
Code Maintenance: It makes code maintenance and modification easier since changes to the internal structure of an object don't impact external code that uses the object.
Security: Encapsulation can help in protecting sensitive data and ensuring that data is accessed and modified according to specific rules.

Declare Data Members as Private: Make instance variables (data members) private to restrict direct access from external code.
Provide Accessor Methods (Getters and Setters): Create public methods (getters) to access and retrieve the values of private data members and public methods (setters) to modify them.

Example Code
class Student {
    private String name;  // Encapsulated data
    public void setName(String name) {
        // Encapsulated method
        this.name = name;
    }
    public String getName () {
        return "Hello "+name;
    }
}
public class Encapsulation {
    public static void main(String []args)
    {
        Student s=new Student();
        s.setName ("Vinay");
        System.out.println(s.getName());
    }
}


Inheritance
Allows you to create new classes (derived or subclass) based on existing classes (base or superclass).
subclass is a specialized version of a superclass. 
The subclass inherits attributes and behaviors from the superclass and can add new features or modify the inherited ones.
Code Reuse: Inheritance allows you to reuse and extend existing code, avoiding the need to rewrite common functionality in multiple places.
Keyword extends: To create a subclass, you use the extends keyword followed by the name of the superclass.
class Subclass extends Superclass {
    // Subclass members and methods
}
Method Overriding: Subclasses can override (provide a new implementation for) methods that are inherited from the superclass.
To do this, the subclass method must have the same method signature (method name, parameter list, and return type) as the superclass method.
Use the @Override annotation to indicate that a method in the subclass is intended to override a superclass method.
Constructor Invocation: When you create a subclass, the constructor of the superclass should be called explicitly using the super keyword in the subclass constructor. If you don't call a superclass constructor explicitly, the default (parameterless) constructor of the superclass is called automatically.
public Subclass() {
    super(); // Calls the superclass constructor
}

Inheritance through Abstraction (Abstract Classes):
Abstract Classes:
An abstract class is a class that can have both abstract (unimplemented) and concrete (implemented) methods.
It can also have instance variables, constructors, and other features of a regular class.
Use Cases:
Abstract classes are suitable for situations where you have a base class that contains some common functionality but cannot be instantiated on its own.
They are often used when you want to provide a default implementation for some methods while forcing subclasses to implement others.
Example code:
abstract class Animal {
    String name;
    public abstract void makeSound(); // Abstract method
    public void eat() {
        System.out.println(name + " is eating.");
    }
}
class Dog extends Animal {
    public void makeSound() {
        System.out.println(name + " barks.");
    }
}

Inheritance through Interfaces:
Interfaces:
An interface is a contract that defines a set of method signatures (abstract methods) that implementing classes must adhere to.
Interfaces cannot have instance variables or method implementations.
A class can implement multiple interfaces, allowing it to inherit behaviour from multiple sources.
Use Cases:
Interfaces are used to define a common set of methods that multiple classes can implement, promoting code consistency.
They are suitable for scenarios where you want to enforce a contract that multiple classes should adhere to, regardless of their inheritance hierarchy.
Example code:
interface Sound {
    void makeSound();
}

class Dog implements Sound {
    public void makeSound() {
        System.out.println("Dog barks.");
    }
}

class Cat implements Sound {
    public void makeSound() {
        System.out.println("Cat meows.");
    }
}
